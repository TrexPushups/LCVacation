{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.modals = [];\n  }\n  add(modal) {\n    // ensure component has a unique id attribute\n    if (!modal.id || this.modals.find(x => x.id === modal.id)) {\n      throw new Error('modal must have a unique id attribute');\n    }\n    // add modal to array of active modals\n    this.modals.push(modal);\n  }\n  remove(modal) {\n    // remove modal from array of active modals\n    this.modals = this.modals.filter(x => x === modal);\n  }\n  open(id) {\n    // open modal specified by id\n    const modal = this.modals.find(x => x.id === id);\n    if (!modal) {\n      throw new Error(`modal '${id}' not found`);\n    }\n    modal.open();\n  }\n  close() {\n    // close the modal that is currently open\n    const modal = this.modals.find(x => x.isOpen);\n    modal?.close();\n  }\n}\nModalService.ɵfac = function ModalService_Factory(t) {\n  return new (t || ModalService)();\n};\nModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ModalService,\n  factory: ModalService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,YAAY;EADzBC;IAEU,WAAM,GAAqB,EAAE;;EAErCC,GAAG,CAACC,KAAqB;IACvB;IACA,IAAI,CAACA,KAAK,CAACC,EAAE,IAAI,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKD,KAAK,CAACC,EAAE,CAAC,EAAE;MACzD,MAAM,IAAII,KAAK,CAAC,uCAAuC,CAAC;;IAG1D;IACA,IAAI,CAACH,MAAM,CAACI,IAAI,CAACN,KAAK,CAAC;EACzB;EAEAO,MAAM,CAACP,KAAqB;IAC1B;IACA,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,CAACM,MAAM,CAACJ,CAAC,IAAIA,CAAC,KAAKJ,KAAK,CAAC;EACpD;EAEAS,IAAI,CAACR,EAAU;IACb;IACA,MAAMD,KAAK,GAAG,IAAI,CAACE,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IAEhD,IAAI,CAACD,KAAK,EAAE;MACV,MAAM,IAAIK,KAAK,CAAC,UAAUJ,EAAE,aAAa,CAAC;;IAG5CD,KAAK,CAACS,IAAI,EAAE;EACd;EAEAC,KAAK;IACH;IACA,MAAMV,KAAK,GAAG,IAAI,CAACE,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACO,MAAM,CAAC;IAC7CX,KAAK,EAAEU,KAAK,EAAE;EAChB;;AAjCWb,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAe,SAAZf,YAAY;EAAAgB,YADC;AAAM","names":["ModalService","constructor","add","modal","id","modals","find","x","Error","push","remove","filter","open","close","isOpen","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Jeremy\\Source\\Repos\\LCVacation\\ClientApp\\src\\app\\_services\\modal.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { ModalComponent } from '../_components';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ModalService {\r\n  private modals: ModalComponent[] = [];\r\n\r\n  add(modal: ModalComponent) {\r\n    // ensure component has a unique id attribute\r\n    if (!modal.id || this.modals.find(x => x.id === modal.id)) {\r\n      throw new Error('modal must have a unique id attribute');\r\n    }\r\n\r\n    // add modal to array of active modals\r\n    this.modals.push(modal);\r\n  }\r\n\r\n  remove(modal: ModalComponent) {\r\n    // remove modal from array of active modals\r\n    this.modals = this.modals.filter(x => x === modal);\r\n  }\r\n\r\n  open(id: string) {\r\n    // open modal specified by id\r\n    const modal = this.modals.find(x => x.id === id);\r\n\r\n    if (!modal) {\r\n      throw new Error(`modal '${id}' not found`);\r\n    }\r\n\r\n    modal.open();\r\n  }\r\n\r\n  close() {\r\n    // close the modal that is currently open\r\n    const modal = this.modals.find(x => x.isOpen);\r\n    modal?.close();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}