{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EmployeeService {\n  constructor(http, baseUrl) {\n    this.employees = [];\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n  ngOnInit() {\n    this.employees = this.getPosts();\n  }\n  getPosts() {\n    const promise = new Promise((resolve, reject) => {\n      const apiURL = this.baseUrl + 'Employee';\n      this.http.get(apiURL).subscribe({\n        next: res => {\n          this.employees = res.map(res => {\n            return res;\n          });\n          resolve();\n        },\n        error: err => {\n          reject(err);\n        },\n        complete: () => {\n          console.log('complete');\n        }\n      });\n    });\n    return promise;\n  }\n  getEmployees() {\n    const promise = this.http.get().toPromise();\n    console.log(promise);\n    promise.then(data => {\n      return data;\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n  work(days, id) {\n    this.http.post(this.baseUrl + 'Employee' + '\\\\Work', {\n      days: days,\n      id: id\n    }).subscribe(result => {\n      this.employees = result;\n    }, error => console.error(error));\n    return this.employees;\n  }\n  vacation(days, id) {\n    this.http.post(this.baseUrl + 'Employee' + '\\\\TakeVacation', {\n      days: days,\n      id: id\n    }).subscribe(result => {\n      this.employees = result;\n    }, error => console.error(error));\n    return this.employees;\n  }\n}\nEmployeeService.ɵfac = function EmployeeService_Factory(t) {\n  return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nEmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmployeeService,\n  factory: EmployeeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,eAAe;EAK1BC,YAAYC,IAAgB,EAAsBC,OAAe;IAJjE,cAAS,GAAe,EAAE;IAKxB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAExB;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,QAAQ,EAAE;EAClC;EAEAA,QAAQ;IACN,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAI;MACpD,MAAMC,MAAM,GAAG,IAAI,CAACR,OAAO,GAAG,UAAU;MACxC,IAAI,CAACD,IAAI,CAACU,GAAG,CAAaD,MAAM,CAAC,CAACE,SAAS,CAAC;QAC1CC,IAAI,EAAGC,GAAQ,IAAI;UACjB,IAAI,CAACV,SAAS,GAAGU,GAAG,CAACC,GAAG,CAAED,GAAQ,IAAI;YACpC,OAAOA,GAAG;UACZ,CAAC,CAAC;UACFN,OAAO,EAAE;QACX,CAAC;QACDQ,KAAK,EAAGC,GAAQ,IAAI;UAClBR,MAAM,CAACQ,GAAG,CAAC;QACb,CAAC;QACDC,QAAQ,EAAE,MAAK;UACbC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;QACzB;OACD,CAAC;IACJ,CAAC,CAAC;IACF,OAAOd,OAAO;EAChB;EAEAe,YAAY;IAEV,MAAMf,OAAO,GAAG,IAAI,CAACL,IAAI,CAACU,GAAG,EAAc,CAACW,SAAS,EAAE;IACvDH,OAAO,CAACC,GAAG,CAACd,OAAO,CAAC;IACpBA,OAAO,CAACiB,IAAI,CAAEC,IAAI,IAAI;MACpB,OAAOA,IAAI;IACb,CAAC,CAAC,CAACC,KAAK,CAAET,KAAK,IAAI;MACjBG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;IACpB,CAAC,CAAC;EAEJ;EAEAU,IAAI,CAACC,IAAY,EAAEC,EAAU;IAC3B,IAAI,CAAC3B,IAAI,CAAC4B,IAAI,CAAa,IAAI,CAAC3B,OAAO,GAAG,UAAU,GAAE,QAAQ,EAAE;MAAEyB,IAAI,EAAEA,IAAI;MAAEC,EAAE,EAAEA;IAAE,CAAE,CACnF,CAAChB,SAAS,CAACkB,MAAM,IAAG;MACnB,IAAI,CAAC1B,SAAS,GAAG0B,MAAM;IACzB,CAAC,EAAEd,KAAK,IAAIG,OAAO,CAACH,KAAK,CAACA,KAAK,CAAC,CAAC;IAEnC,OAAO,IAAI,CAACZ,SAAS;EACvB;EAEA2B,QAAQ,CAACJ,IAAY,EAAEC,EAAU;IAC/B,IAAI,CAAC3B,IAAI,CAAC4B,IAAI,CAAa,IAAI,CAAC3B,OAAO,GAAG,UAAU,GAAG,gBAAgB,EAAE;MAAEyB,IAAI,EAAEA,IAAI;MAAEC,EAAE,EAAEA;IAAE,CAAE,CAC9F,CAAChB,SAAS,CAACkB,MAAM,IAAG;MACnB,IAAI,CAAC1B,SAAS,GAAG0B,MAAM;IACzB,CAAC,EAAEd,KAAK,IAAIG,OAAO,CAACH,KAAK,CAACA,KAAK,CAAC,CAAC;IAEjC,OAAO,IAAI,CAACZ,SAAS;EACvB;;AAhEWL,eAAe;mBAAfA,eAAe,0CAKY,UAAU;AAAA;AALrCA,eAAe;SAAfA,eAAe;EAAAiC,SAAfjC,eAAe;EAAAkC,YAHF;AAAM","names":["EmployeeService","constructor","http","baseUrl","ngOnInit","employees","getPosts","promise","Promise","resolve","reject","apiURL","get","subscribe","next","res","map","error","err","complete","console","log","getEmployees","toPromise","then","data","catch","work","days","id","post","result","vacation","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Jeremy\\Source\\Repos\\LCVacation\\ClientApp\\src\\app\\employee.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, NgModule } from \"@angular/core\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Employee } from \"./Employee\";\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\n\r\n\r\nexport class EmployeeService {\r\n  employees: Employee[] = [];\r\n  http: HttpClient;\r\n  baseUrl: string;\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    this.http = http;\r\n    this.baseUrl = baseUrl;\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.employees = this.getPosts();\r\n  }\r\n\r\n  getPosts() {\r\n    const promise = new Promise<void>((resolve, reject) => {\r\n      const apiURL = this.baseUrl + 'Employee';\r\n      this.http.get<Employee[]>(apiURL).subscribe({\r\n        next: (res: any) => {\r\n          this.employees = res.map((res: any) => {\r\n            return res;\r\n          });\r\n          resolve();\r\n        },\r\n        error: (err: any) => {\r\n          reject(err);\r\n        },\r\n        complete: () => {\r\n          console.log('complete');\r\n        },\r\n      });\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  getEmployees(): any {\r\n    \r\n    const promise = this.http.get<Employee[]>().toPromise();\r\n    console.log(promise);\r\n    promise.then((data) => {\r\n      return data;\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    })\r\n\r\n  }\r\n\r\n  work(days: number, id: number) {\r\n    this.http.post<Employee[]>(this.baseUrl + 'Employee'+ '\\\\Work', { days: days, id: id }\r\n      ).subscribe(result => {\r\n        this.employees = result;\r\n      }, error => console.error(error));\r\n\r\n    return this.employees;\r\n  }\r\n\r\n  vacation(days: number, id: number) {\r\n    this.http.post<Employee[]>(this.baseUrl + 'Employee' + '\\\\TakeVacation', { days: days, id: id }\r\n    ).subscribe(result => {\r\n      this.employees = result;\r\n    }, error => console.error(error));\r\n\r\n    return this.employees;\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}