{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet FetchDataComponent = class FetchDataComponent {\n  constructor(formBuilder, service) {\n    this.formBuilder = formBuilder;\n    this.employees = [];\n    //Form Validables\n    this.modalId = 0;\n    this.displayWorkModal = false;\n    this.submitted = false;\n    this.service = service;\n  }\n  get f() {\n    return this.Work.controls;\n  }\n  onSubmitWork() {\n    const days = this.WorkForm.get('DaysWorked')?.value;\n    console.log(days);\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.WorkForm.invalid) {\n      return;\n    }\n    //True if all the fields are filled\n    if (this.submitted) {\n      this.work(days, this.modalId);\n    }\n  }\n  get v() {\n    return this.Vacation.controls;\n  }\n  onTakeVacation() {\n    const days = this.Vacation.get('VacationDays')?.value;\n    console.log(days);\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.Vacation.invalid) {\n      return;\n    }\n    //True if all the fields are filled\n    if (this.submitted) {\n      this.takeVacation(days, this.modalId);\n    }\n  }\n  ngOnInit() {\n    //Add User form validations\n    this.service.getEmployees().subscribe(data => this.employees = data);\n    this.Work = this.formBuilder.group({\n      DaysWorked: ['', [Validators.required, Validators.max(260), Validators.min(0)]]\n    });\n    this.Vacation = this.formBuilder.group({\n      VacationDays: [this.VacationForm, [Validators.required, Validators.max(30), Validators.min(0)]]\n    });\n  }\n  prepDialog(id) {\n    this.modalId = id;\n    this.Work = this.formBuilder.group({\n      DaysWorked: ['', [Validators.required, Validators.max(this.employees[id].maxWorkDays), Validators.min(0)]]\n    });\n    this.Vacation = this.formBuilder.group({\n      VacationDays: ['', [Validators.required, Validators.max(this.employees[id].maxVacationDays), Validators.min(0)]]\n    });\n  }\n  work(days, id) {\n    this.service.work(days, id).subscribe(data => {\n      this.employees = data;\n    }, error => {\n      console.log(error);\n    });\n  }\n  takeVacation(days, id) {\n    this.service.vacation(days, id).subscribe(data => {\n      this.employees = data;\n    }, error => {\n      console.log(error);\n    });\n  }\n};\nFetchDataComponent = __decorate([Component({\n  selector: 'app-fetch-data',\n  templateUrl: './fetch-data.component.html'\n})], FetchDataComponent);\nexport { FetchDataComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","FetchDataComponent","constructor","formBuilder","service","f","Work","controls","onSubmitWork","days","WorkForm","get","value","console","log","submitted","invalid","work","modalId","v","Vacation","onTakeVacation","takeVacation","ngOnInit","getEmployees","subscribe","data","employees","group","DaysWorked","required","max","min","VacationDays","VacationForm","prepDialog","id","maxWorkDays","maxVacationDays","error","vacation","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\Jeremy\\Source\\Repos\\LCVacation\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { Employee } from '../Employee';\r\nimport { EmployeeService } from '../employee.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public employees: Employee[] = [];\r\n  private service: EmployeeService;\r\n  //Form Validables\r\n  public modalId: number = 0;\r\n  displayWorkModal: boolean = false;\r\n  Work!: FormGroup;\r\n  Vacation!: FormGroup;\r\n\r\n  WorkForm!: FormControl;\r\n  VacationDays!: FormControl;\r\n  submitted = false;\r\n\r\n  constructor(private formBuilder: FormBuilder, service:EmployeeService) {\r\n    this.service = service;\r\n  }\r\n\r\n  get f() { return this.Work.controls; }\r\n  onSubmitWork() {\r\n    const days = this.WorkForm.get('DaysWorked')?.value;\r\n    console.log(days);\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.WorkForm.invalid) {\r\n      return;\r\n    }\r\n    //True if all the fields are filled\r\n    if (this.submitted) {\r\n\r\n      this.work(days, this.modalId);\r\n    }\r\n\r\n  }\r\n\r\n  get v() { return this.Vacation.controls; }\r\n  onTakeVacation() {\r\n    const days = this.Vacation.get('VacationDays')?.value;\r\n    console.log(days);\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.Vacation.invalid) {\r\n      return;\r\n    }\r\n    //True if all the fields are filled\r\n    if (this.submitted) {\r\n      this.takeVacation(days, this.modalId);\r\n    }\r\n\r\n  }\r\n  ngOnInit() {\r\n    //Add User form validations\r\n    this.service.getEmployees().subscribe(\r\n      data => this.employees = data\r\n    );\r\n    this.Work = this.formBuilder.group({\r\n      DaysWorked: ['', [Validators.required, Validators.max(260), Validators.min(0)]],\r\n    });\r\n\r\n    this.Vacation = this.formBuilder.group({\r\n      VacationDays: [this.VacationForm, [Validators.required, Validators.max(30), Validators.min(0)]],\r\n    });\r\n    \r\n  }\r\n\r\n  prepDialog(id: number) {\r\n    this.modalId = id;\r\n    \r\n\r\n    this.Work = this.formBuilder.group({\r\n      DaysWorked: ['', [Validators.required, Validators.max(this.employees[id].maxWorkDays), Validators.min(0)]],\r\n    });\r\n\r\n    this.Vacation = this.formBuilder.group({\r\n      VacationDays: ['', [Validators.required, Validators.max(this.employees[id].maxVacationDays), Validators.min(0)]],\r\n    });\r\n  }\r\n\r\n  public work(days: number, id: number) {\r\n\r\n    this.service.work(days, id).subscribe(\r\n      (data) => { this.employees = data },\r\n      (error) => { console.log(error); }\r\n    );\r\n  }\r\n\r\n  public takeVacation(days:number, id: number) {\r\n    this.service.vacation(days, id).subscribe(\r\n      (data) => { this.employees = data },\r\n      (error) => {console.log(error) }\r\n    );\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}