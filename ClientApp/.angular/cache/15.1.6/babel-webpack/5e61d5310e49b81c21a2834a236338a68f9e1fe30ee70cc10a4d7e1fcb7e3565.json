{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EmployeeService {\n  constructor(http, baseUrl) {\n    this.employees = [];\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n  ngOnInit() {\n    this.employees = this.getEmployees();\n  }\n  getEmployees() {\n    const apiURL = this.baseUrl + 'Employee';\n    this.http.get(apiURL).subscribe(response => {\n      console.log(\"Response \" + response.toString());\n      return response;\n    }, error => console.log(error));\n    //const promise = new Promise<void>((resolve, reject) => {\n    //  \n    //  this.http.get<Employee[]>(apiURL).subscribe({\n    //    next: (res: any) => {\n    //      this.employees = res.map((res: any) => {\n    //        return res;\n    //      });\n    //      resolve();\n    //    },\n    //    error: (err: any) => {\n    //      reject(err);\n    //    },\n    //    complete: () => {\n    //      console.log('complete');\n    //      return this.employees;\n    //    },\n    //  });\n    //});\n    //return promise;\n  }\n  //getEmployees(): any {\n  //  const promise = this.http.get<Employee[]>().toPromise();\n  //  console.log(promise);\n  //  promise.then((data) => {\n  //    return data;\n  //  }).catch((error) => {\n  //    console.log(error);\n  //  })\n  //}\n  work(days, id) {\n    this.http.post(this.baseUrl + 'Employee' + '\\\\Work', {\n      days: days,\n      id: id\n    }).subscribe(result => {\n      this.employees = result;\n    }, error => console.error(error));\n    return this.employees;\n  }\n  vacation(days, id) {\n    this.http.post(this.baseUrl + 'Employee' + '\\\\TakeVacation', {\n      days: days,\n      id: id\n    }).subscribe(result => {\n      this.employees = result;\n    }, error => console.error(error));\n    return this.employees;\n  }\n}\nEmployeeService.ɵfac = function EmployeeService_Factory(t) {\n  return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nEmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmployeeService,\n  factory: EmployeeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,eAAe;EAK1BC,YAAYC,IAAgB,EAAsBC,OAAe;IAJjE,cAAS,GAAe,EAAE;IAKxB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAExB;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,YAAY,EAAE;EACtC;EAEAA,YAAY;IACV,MAAMC,MAAM,GAAG,IAAI,CAACJ,OAAO,GAAG,UAAU;IACxC,IAAI,CAACD,IAAI,CAACM,GAAG,CAAaD,MAAM,CAAC,CAACE,SAAS,CAAEC,QAAQ,IAAI;MACvDC,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGF,QAAQ,CAACG,QAAQ,EAAE,CAAC;MAC9C,OAAOH,QAAQ;IACjB,CAAC,EACCI,KAAK,IAAIH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC,CAAC;IAE9B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEAC,IAAI,CAACC,IAAY,EAAEC,EAAU;IAC3B,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAa,IAAI,CAACf,OAAO,GAAG,UAAU,GAAE,QAAQ,EAAE;MAAEa,IAAI,EAAEA,IAAI;MAAEC,EAAE,EAAEA;IAAE,CAAE,CACnF,CAACR,SAAS,CAACU,MAAM,IAAG;MACnB,IAAI,CAACd,SAAS,GAAGc,MAAM;IACzB,CAAC,EAAEL,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC,CAAC;IAEnC,OAAO,IAAI,CAACT,SAAS;EACvB;EAEAe,QAAQ,CAACJ,IAAY,EAAEC,EAAU;IAC/B,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAa,IAAI,CAACf,OAAO,GAAG,UAAU,GAAG,gBAAgB,EAAE;MAAEa,IAAI,EAAEA,IAAI;MAAEC,EAAE,EAAEA;IAAE,CAAE,CAC9F,CAACR,SAAS,CAACU,MAAM,IAAG;MACnB,IAAI,CAACd,SAAS,GAAGc,MAAM;IACzB,CAAC,EAAEL,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC,CAAC;IAEjC,OAAO,IAAI,CAACT,SAAS;EACvB;;AAxEWL,eAAe;mBAAfA,eAAe,0CAKY,UAAU;AAAA;AALrCA,eAAe;SAAfA,eAAe;EAAAqB,SAAfrB,eAAe;EAAAsB,YAHF;AAAM","names":["EmployeeService","constructor","http","baseUrl","ngOnInit","employees","getEmployees","apiURL","get","subscribe","response","console","log","toString","error","work","days","id","post","result","vacation","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Jeremy\\Source\\Repos\\LCVacation\\ClientApp\\src\\app\\employee.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, NgModule } from \"@angular/core\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Employee } from \"./Employee\";\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\n\r\n\r\nexport class EmployeeService {\r\n  employees: Employee[] = [];\r\n  http: HttpClient;\r\n  baseUrl: string;\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    this.http = http;\r\n    this.baseUrl = baseUrl;\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.employees = this.getEmployees();\r\n  }\r\n\r\n  getEmployees(): any {\r\n    const apiURL = this.baseUrl + 'Employee';\r\n    this.http.get<Employee[]>(apiURL).subscribe((response) => {\r\n      console.log(\"Response \" + response.toString());\r\n      return response;\r\n    },\r\n      error => console.log(error));\r\n\r\n    //const promise = new Promise<void>((resolve, reject) => {\r\n    //  \r\n    //  this.http.get<Employee[]>(apiURL).subscribe({\r\n    //    next: (res: any) => {\r\n    //      this.employees = res.map((res: any) => {\r\n    //        return res;\r\n    //      });\r\n    //      resolve();\r\n    //    },\r\n    //    error: (err: any) => {\r\n    //      reject(err);\r\n    //    },\r\n    //    complete: () => {\r\n    //      console.log('complete');\r\n    //      return this.employees;\r\n    //    },\r\n    //  });\r\n    //});\r\n    //return promise;\r\n  }\r\n\r\n  //getEmployees(): any {\r\n    \r\n  //  const promise = this.http.get<Employee[]>().toPromise();\r\n  //  console.log(promise);\r\n  //  promise.then((data) => {\r\n  //    return data;\r\n  //  }).catch((error) => {\r\n  //    console.log(error);\r\n  //  })\r\n\r\n  //}\r\n\r\n  work(days: number, id: number) {\r\n    this.http.post<Employee[]>(this.baseUrl + 'Employee'+ '\\\\Work', { days: days, id: id }\r\n      ).subscribe(result => {\r\n        this.employees = result;\r\n      }, error => console.error(error));\r\n\r\n    return this.employees;\r\n  }\r\n\r\n  vacation(days: number, id: number) {\r\n    this.http.post<Employee[]>(this.baseUrl + 'Employee' + '\\\\TakeVacation', { days: days, id: id }\r\n    ).subscribe(result => {\r\n      this.employees = result;\r\n    }, error => console.error(error));\r\n\r\n    return this.employees;\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}