{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EmployeeService {\n  constructor(http, baseUrl) {\n    this.employees = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'ContentType': 'application/json'\n      })\n    };\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n  ngOnInit() {}\n  getEmployees() {\n    const apiURL = this.baseUrl + 'Employee';\n    return this.http.get(apiURL).pipe(map(res => res));\n  }\n  //refreshEmployees(): Observable<Employee[]> {\n  //  return this.http.get<EmployeesResponse>('api/refresh').pipe(\n  //    map((res: EmployeesResponse) => res.data)\n  //  );\n  //}\n  work(days, id) {\n    const apiURL = this.baseUrl + +'Employee' + '\\\\Work';\n    return this.http.post(apiURL, {\n      days: days,\n      id: id\n    }).pipe(map(res => res));\n  }\n  vacation(days, id) {\n    const apiURL = this.baseUrl + +'Employee' + '\\\\TakeVacation';\n    return this.http.post(apiURL, {\n      days: days,\n      id: id\n    }).pipe(map(res => res));\n  }\n}\nEmployeeService.ɵfac = function EmployeeService_Factory(t) {\n  return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nEmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmployeeService,\n  factory: EmployeeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAAoCC,GAAG,QAAwB,MAAM;;;AAWrE,OAAM,MAAOC,eAAe;EAQ1BC,YAAYC,IAAgB,EAAsBC,OAAe;IAPjE,cAAS,GAAe,EAAE;IAG1B,gBAAW,GAAG;MACXC,OAAO,EAAE,IAAIN,WAAW,CAAC;QAAC,aAAa,EAAE;MAAkB,CAAC;KAC9D;IAGC,IAAI,CAACI,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAExB;EAEAE,QAAQ,IAER;EAEAC,YAAY;IACV,MAAMC,MAAM,GAAG,IAAI,CAACJ,OAAO,GAAG,UAAU;IAExC,OAAO,IAAI,CAACD,IAAI,CAACM,GAAG,CAAaD,MAAM,CAAC,CAACE,IAAI,CAC1CV,GAAG,CAAEW,GAAe,IAAKA,GAAG,CAAC,CAC/B;EACH;EAEA;EACA;EACA;EACA;EACA;EAEAC,IAAI,CAACC,IAAY,EAAEC,EAAU;IAC3B,MAAMN,MAAM,GAAG,IAAI,CAACJ,OAAO,GAAG,CAAE,UAAU,GAAG,QAAQ;IACrD,OAAO,IAAI,CAACD,IAAI,CAACY,IAAI,CAAaP,MAAM,EAAE;MAAEK,IAAI,EAAEA,IAAI;MAAEC,EAAE,EAAEA;IAAE,CAAE,CAAC,CAC9DJ,IAAI,CACHV,GAAG,CAAEW,GAAe,IAAKA,GAAG,CAAC,CAC9B;EACL;EAEAK,QAAQ,CAACH,IAAY,EAAEC,EAAU;IAC/B,MAAMN,MAAM,GAAG,IAAI,CAACJ,OAAO,GAAG,CAAE,UAAU,GAAG,gBAAgB;IAC7D,OAAO,IAAI,CAACD,IAAI,CAACY,IAAI,CAAaP,MAAM,EAAE;MAAEK,IAAI,EAAEA,IAAI;MAAEC,EAAE,EAAEA;IAAE,CAAE,CAAC,CAC9DJ,IAAI,CACHV,GAAG,CAAEW,GAAe,IAAKA,GAAG,CAAC,CAC9B;EACL;;AA9CWV,eAAe;mBAAfA,eAAe,0CAQY,UAAU;AAAA;AARrCA,eAAe;SAAfA,eAAe;EAAAgB,SAAfhB,eAAe;EAAAiB,YADF;AAAM","names":["HttpHeaders","map","EmployeeService","constructor","http","baseUrl","headers","ngOnInit","getEmployees","apiURL","get","pipe","res","work","days","id","post","vacation","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Jeremy\\Source\\Repos\\LCVacation\\ClientApp\\src\\app\\employee.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Inject, NgModule } from \"@angular/core\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { catchError, lastValueFrom, map, Observable, of } from \"rxjs\";\r\nimport { __values } from \"tslib\";\r\nimport { Employee } from \"./Employee\";\r\n\r\n\r\nexport interface EmployeesResponse {\r\n  data: Employee[];\r\n  // Add other backend response properties here if present\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EmployeeService {\r\n  employees: Employee[] = [];\r\n  http: HttpClient;\r\n  baseUrl: string;\r\n  httpOptions = {\r\n     headers: new HttpHeaders({'ContentType': 'application/json'})\r\n  };\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    this.http = http;\r\n    this.baseUrl = baseUrl;\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    \r\n  }\r\n\r\n  getEmployees(): Observable<Employee[]> {\r\n    const apiURL = this.baseUrl + 'Employee';\r\n   \r\n    return this.http.get<Employee[]>(apiURL).pipe(\r\n       map((res: Employee[]) => res)\r\n    ); \r\n  }\r\n\r\n  //refreshEmployees(): Observable<Employee[]> {\r\n  //  return this.http.get<EmployeesResponse>('api/refresh').pipe(\r\n  //    map((res: EmployeesResponse) => res.data)\r\n  //  );\r\n  //}\r\n\r\n  work(days: number, id: number): Observable<Employee[]> {\r\n    const apiURL = this.baseUrl + + 'Employee' + '\\\\Work'\r\n    return this.http.post<Employee[]>(apiURL, { days: days, id: id })\r\n      .pipe(\r\n        map((res: Employee[]) => res)\r\n      );\r\n  }\r\n\r\n  vacation(days: number, id: number): Observable<Employee[]> {\r\n    const apiURL = this.baseUrl + + 'Employee' + '\\\\TakeVacation'\r\n    return this.http.post<Employee[]>(apiURL, { days: days, id: id })\r\n      .pipe(\r\n        map((res: Employee[]) => res)\r\n      );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}